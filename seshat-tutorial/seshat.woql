WOQL.put(
    WOQL.as("Polity", "v:Polity")
        .as("Property", "v:Property")
        .as("Value", "v:Value")
        .as("From", "v:From")
        .as("To", "v:To")
        .as("Confidence", "v:Confidence"), 
    WOQL.and(
	  WOQL.triple("v:Polity", "type", "v:Type"),
	  WOQL.sub("v:Type", "scm:PoliticalAuthority"),
	  WOQL.triple("v:Polity", "v:Property", "v:Value_ID"),
	  WOQL.triple("v:Value_ID", "type", "v:Value_Type"),
	  WOQL.opt().triple("v:Value_ID", "start", "v:From"),
	  WOQL.opt().triple("v:Value_ID", "end", "v:To"),
	  WOQL.opt().and(
      WOQL.triple("v:Value_ID", "confidence", "v:RawConfidence"),
      WOQL.re("#(.*)", "v:RawConfidence", ["v:FullConfidence", "v:Confidence"])
    )
	  WOQL.and(
		  WOQL.or(
			  WOQL.triple("v:Value_ID", "scm:integerRange", "v:Value"),
			  WOQL.triple("v:Value_ID", "scm:decimalRange", "v:Value"),
			  WOQL.and(
          WOQL.triple("v:Value_ID", "scm:epistemicState", "v:RawValue"),
          WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        ),
			  WOQL.and(
  			    WOQL.triple("v:Value_ID", "scm:degreeOfCentralization", "v:RawValue"),
            WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        ),
			  WOQL.and(
  			    WOQL.triple("v:Value_ID", "scm:incomeSource", "v:RawValue"), 
            WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        ),
			  WOQL.and(  			 
			    WOQL.triple("v:Value_ID", "scm:supraPolityRelations", "v:RawValue"),
          WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        )
		  )
	  )
	)
).file("/app/local_files/full_dump.csv")




WOQL.put(
    WOQL.as("Polity", "v:Polity")
        .as("Property", "v:Property")
        .as("Value", "v:Value")
        .as("From", "v:From")
        .as("To", "v:To")
        .as("Confidence", "v:Confidence"), 
    WOQL.and(
	  WOQL.triple("v:Polity", "type", "v:Type"),
	  WOQL.sub("v:Type", "scm:PoliticalAuthority"),
	  WOQL.triple("v:Polity", "v:Property", "v:Value_ID"),
	  WOQL.triple("v:Value_ID", "type", "v:Value_Type"),
	  WOQL.opt().triple("v:Value_ID", "start", "v:From"),
	  WOQL.opt().triple("v:Value_ID", "end", "v:To"),
	  WOQL.opt().triple("v:Value_ID", "confidence", "v:Confidence"),
	  WOQL.and(
		  WOQL.or(
			  WOQL.triple("v:Value_ID", "scm:integerRange", "v:Value"),
			  WOQL.triple("v:Value_ID", "scm:decimalRange", "v:Value"),
			  WOQL.triple("v:Value_ID", "scm:epistemicState", "v:Value"),
			  WOQL.triple("v:Value_ID", "scm:degreeOfCentralization", "v:Value"),
			  WOQL.triple("v:Value_ID", "scm:incomeSource", "v:Value"),
			  WOQL.triple("v:Value_ID", "scm:supraPolityRelations", "v:Value"),
		  )
	  )
	)
).file("/app/local_files/test2.csv")


/* WOQL to extract all data points with annotations
WOQL.limit(50).select("v:Polity", "v:Property", "v:Value", "v:From", "v:To", "v:Confidence").and(
    WOQL.triple("v:Polity", "type", "v:Type"),
    WOQL.sub("v:Type", "scm:PoliticalAuthority"),
    WOQL.triple("v:Polity", "v:Property", "v:Value_ID"),
    WOQL.triple("v:Value_ID", "type", "v:Value_Type"),
    WOQL.opt().triple("v:Value_ID", "start", "v:From"),
    WOQL.opt().triple("v:Value_ID", "end", "v:To"),
    WOQL.opt().triple("v:Value_ID", "confidence", "v:Confidence"),
    WOQL.and(
		WOQL.or(
		    WOQL.triple("v:Value_ID", "scm:integerRange", "v:Value"),
		    WOQL.triple("v:Value_ID", "scm:decimalRange", "v:Value"),
		    WOQL.triple("v:Value_ID", "scm:epistemicState", "v:Value"),
		    WOQL.triple("v:Value_ID", "scm:degreeOfCentralization", "v:Value"),
		    WOQL.triple("v:Value_ID", "scm:incomeSource", "v:Value"),
		    WOQL.triple("v:Value_ID", "scm:supraPolityRelations", "v:Value"),
		)
	)
)

//Query to load seshat main graph data
WOQL.get(WOQL.as("v:S").as("v:P").as("v:O"))
    .remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"});

//Query to ingest shape file spreadsheets

WOQL.when(
    WOQL.and(
    WOQL.group_by(["v:Fid","v:Polity","v:Year"],"v:Point",
        WOQL.and(
            WOQL.get(
            WOQL.as("fid", "v:Fid")
                .as("Polity_nam", "v:Polity")
                .as("xcoord", "v:xcoord")
                .as("ycoord", "v:ycoord")
                .as("Year", "v:Year")
                )
            .remote("https://terminusdb.com/t/data/seshat/csvs/0CE.csv"),
            WOQL.concat("[v:xcoord,v:ycoord]","v:Point")
        ),"v:Records"),
    WOQL.lower("v:Polity","v:Polity_Lower"),
    WOQL.pad("v:Year",0,4,"v:GYear"),
    WOQL.concat("doc:v:Polity_Lower","v:Polity_ID"),
    WOQL.unique("doc:Temporality",["scm:Temporality","v:GYear"],"v:Temporality"),
    WOQL.concat("[v:GYear,v:GYear]","v:Range"),
    WOQL.join("v:Records",",","v:Coord_String"),
    WOQL.concat("[v:Coord_String]","v:Coords"),
    WOQL.unique("doc:QualifiedPolygon",["scm:QualifiedPolygon","v:Coords"],"v:Territory")
), WOQL.and(
    WOQL.insert("v:Polity_ID","Polity")
        .label("v:Polity")
        .property("territory","v:Territory")
    WOQL.insert("v:Territory", "scm:QualifiedPolygon")
        .property("tcs:coordinatePolygon", "v:Coords")
        .property("temporality","v:Temporality"),
    WOQL.insert("v:Temporality", "scm:FuzzyLifespanEndpoint")
        .property("tcs:gYearRange", "v:Range")
))

/* basic query to read RDF / turtle files */
WOQL.limit(30).get(
WOQL.as("v:X")
    .as("v:P")
    .as("v:Y")
    )
.remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"})

/* query to ingest RDF turtle files */
WOQL.when(
    WOQL.and(
        WOQL.get(
        WOQL.as("v:X")
            .as("v:P")
            .as("v:Y")
        ).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"}),
        WOQL.eq("v:Y","http://dacura.scss.tcd.ie/seshat/ontology/seshat#Polity"),
        WOQL.eq("v:P","rdf:type"),
        WOQL.re(".*/candidate/(.*)","v:X",["v:All","v:Polity_Extension"]),
        WOQL.concat("doc:v:Polity_Extension","v:Polity_ID")
    ), WOQL.add_triple("v:Polity_ID", "rdf:type", "Polity"))


/* query to dump output as CSV */

 WOQL.when(WOQL.and(
        WOQL.get(
        WOQL.as("v:X")
            .as("v:P")
            .as("v:Y")
        ).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"}),
        WOQL.eq("v:P","rdfs:label"),
        WOQL.re(".*/candidate/(.*)","v:X",["v:All","v:Polity_Extension"]),
        WOQL.idgen("doc:",["v:Polity_Extension"], "v:Polity_ID"),
    ),
	WOQL.add_triple("v:Polity_ID", "rdfs:label", "v:Y")
)

WOQL.limit(50).and(
     WOQL.triple("v:Polity_ID", "type", "scm:Polity"),
     WOQL.get(
        WOQL.as("v:X")
            .as("v:P")
            .as("v:Y")
        ).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"}),
        //WOQL.eq("v:X", "http://datachemist.net/seshat/candidate/afdurrn/fq2rtq4ew3")
        WOQL.eq("v:P", "http://dacura.scss.tcd.ie/seshat/ontology/seshat#predecessor"),
        WOQL.re(".*/candidate/(.*)","v:X",["v:All","v:Polity_Extension"]),
        WOQL.idgen("doc:",["v:Polity_Extension"], "v:Imported_Polity_ID"),
        WOQL.eq("v:Polity_ID", "v:Imported_Polity_ID"),
	  WOQL.and(
		WOQL.get(
			WOQL.as("v:S2")
				.as("v:P2")
				.as("v:O2")
			).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"}),
	   WOQL.eq("v:S2", "v:Y"),
	   WOQL.eq("v:P2", "http://dacura.scss.tcd.ie/seshat/ontology/seshat#politicalAuthorityReference"),
		WOQL.re(".*/candidate/(.*)","v:O2",["v:All","v:Target_Extension"]),
        WOQL.idgen("doc:",["v:Target_Extension"], "v:O2", "v:Target_Polity_ID"),
	  )
)

WOQL.when(WOQL.and(
     WOQL.triple("v:Polity_ID", "type", "scm:Polity"),
     WOQL.get(
        WOQL.as("v:X")
            .as("v:P")
            .as("v:Y")
        ).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"}),
        //WOQL.eq("v:X", "http://datachemist.net/seshat/candidate/afdurrn/fq2rtq4ew3")
        WOQL.eq("v:P", "http://dacura.scss.tcd.ie/seshat/ontology/seshat#predecessor"),
        WOQL.re(".*/candidate/(.*)","v:X",["v:All","v:Polity_Extension"]),
        WOQL.idgen("doc:",["v:Polity_Extension"], "v:Imported_Polity_ID"),
        WOQL.eq("v:Polity_ID", "v:Imported_Polity_ID"),
	    WOQL.and(
		  WOQL.get(
			WOQL.as("v:S2")
				.as("v:P2")
				.as("v:O2")
			).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"}),
	        WOQL.eq("v:S2", "v:Y"),
	        WOQL.eq("v:P2", "http://dacura.scss.tcd.ie/seshat/ontology/seshat#politicalAuthorityReference"),
	        WOQL.re(".*/candidate/(.*)","v:O2",["v:All2","v:Target_Extension"]),
            WOQL.idgen("doc:",["v:Target_Extension"], "v:Target_Polity_ID"),
		    WOQL.not().eq("v:Polity_ID","v:Target_Polity_ID")
	  )
), WOQL.add_triple("v:Polity_ID", "scm:predecessor", "v:Target_Polity_ID"))

WOQL.put(
    WOQL.as("NGA ID", "v:NGA")
        .as("Property ID", "v:Property").
        .as("Start Year", "v:Start").
      , "v:Value", "v:Start", "v:End", "v:Confidence")


WOQL.put(
    WOQL.as("Object", "v:Object")
        .as("Predicate", "v:Predicate")
        .as("Subject", "v:Subject")
).file("/tmp/test.csv")


function importRDF(WOQL, main, annotations, provenance){
    let get = importTriples(WOQL, main);    
    var inserts = WOQL.and(
        WOQL.add_triple("v:S", "v:P", "v:O")
    )
    return WOQL.when(inputs, inserts);
}

function importAllClasses(WOQL, url){
    var constraints = [
        WOQL.eq("v:P","rdf:type")
    ];
    let get = importTriples(WOQL, url);    
    var inputs = WOQL.and(get, ...constraints);
    var inserts = WOQL.and(
        WOQL.add_class("v:O")
    )
    return WOQL.when(inputs, inserts);
}

function importTriples(WOQL, url, s, p, o){
    s = s || "v:S";
    p = p || "v:P";
    o = o || "v:O";
    return WOQL.get(WOQL.as(s).as(p).as(o)).remote(url,{"type":"turtle"});
}

function importSeshat(){
    const triples = WOQL.get(WOQL.as("v:S").as("v:P").as("v:O"))
    .remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"});
    //first call import all Classes 
    //WOQL.when(
    //    WOQL.and(triples, WOQL.eq("v:P","rdf:type")), 
    //    WOQL.add_class("v:O")
    //)
    //then import all properties
    // bst inpuy = woql.and(triples, )
    //WOQL.when(triples, WOQL.and(
    //    WOQL.add_quad("v:P", )
    
    //)
    //then
    //WOQL.when(get, WOQL.add_triple("v:S", "v:P". "v:O"))
}

const triples = WOQL.get(WOQL.as("v:S").as("v:P").as("v:O")).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"})
//const import_properties = WOQL.when(WOQL.and(triples, WOQL.not().eq("v:P","rdf:type")), WOQL.add_property("v:P").domain("owl:Thing"));

const triples = WOQL.get(WOQL.as("v:S").as("v:P").as("v:O")).remote("https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl",{"type":"turtle"})
const import_properties = WOQL.when(
    WOQL.and(triples, 
        WOQL.not().eq("v:P","rdf:type"),
        WOQL.eq("v:NO", {"@value": "v:O"})
    ), WOQL.add_property("v:P", "owl:Thing").domain("owl:Thing"));

const obj_props = WOQL.select("v:P", "v:O", "v:All").and(triples, 
    WOQL.not().eq("v:P","rdf:type"),
    WOQL.re("^http(.*)", "v:O", ["v:All", "v:ObjectProperty"]),							  
    WOQL.not().eq("v:P","http://dacura.scss.tcd.ie/ontology/dacura#string"),
)

const data_props = WOQL.select("v:P", "v:O", "v:All").and(triples, 
    WOQL.not().eq("v:P","rdf:type"),
    WOQL.not().eq("v:P","rdfs:label"),
    WOQL.not().eq("v:P","rdfs:comment"),
    WOQL.not().re("^http(.*)", "v:O", ["v:All", "v:ObjectProperty"])							  
)

const import_classes = WOQL.when(WOQL.and(triples, WOQL.eq("v:P","rdf:type")), WOQL.add_class("v:O"));
const add_obj_props = WOQL.when(obj_props, WOQL.add_property("v:P", "owl:Thing").domain("owl:Thing"))
const add_data_props = WOQL.when(data_props, WOQL.add_property("v:P", "xsd:anySimpleType").domain("owl:Thing"))
const import_all = WOQL.when(triples, WOQL.add_triple("v:S", "v:P", "v:O"));

{"with" : ["graph://temp",
           {"remote" : ["https://terminusdb.com/t/data/seshat/seshat_main_export_graph.ttl", {"type":"turtle"}]},
           {"limit" :[50,
					  {"and": [
						{"quad" : ["v:AID", "v:First_Pred", "v:Join", "graph://temp"]},
						{"quad" : ["v:Join", "v:Second_Pred", "v:Target", "graph://temp"]},
						{
  "and": [
    {
      "eq": [
        "http://dacura.scss.tcd.ie/seshat/ontology/seshat#population",
        "v:First_Pred"
      ]
    },
    {
      "idgen": [
        "scm:",
        {
          "list": [
            {"@value": "integerRange", "@type": "xsd:string"}
          ]
        },
        "v:Pseudo_Property"
      ]
    },
    {
      "idgen": [
        "scm:",
        {
          "list": [
            {"@value": "population", "@type": "xsd:string"}
          ]
        },
        "v:New_Property"
      ]
    },
    {
      "idgen": [
        "scm:",
        {
          "list": [
            "population_Value"
          ]
        },
        "v:Value_Type"
      ]
    },
    {
      "unique": [
        "doc:",
        {
          "list": [
            "v:Join"
          ]
        },
        "v:Value_ID"
      ]
    }
  ]
}
					  ]}]}]}


WOQL.put(
    WOQL.as("Polity", "v:Polity_ID")
        .as("Property", "v:Property")
        .as("Value", "v:Value")
        .as("From", "v:From")
        .as("To", "v:To")
        .as("Confidence", "v:Confidence")
        .as("Notes", "v:Notes"),  
WOQL.and(
	  WOQL.triple("v:Polity", "type", "v:Type"),
    WOQL.re("document/(.*)", "v:Polity", ["v:FullPolity", "v:Polity_ID"]),
	  WOQL.sub("v:Type", "scm:PoliticalAuthority"),
	  WOQL.triple("v:Polity", "v:RawProperty", "v:Value_ID"),
    WOQL.re("#(.*)", "v:RawProperty", ["v:FullProperty", "v:Property"]),
	  WOQL.triple("v:Value_ID", "type", "v:Value_Type"),
	  WOQL.opt().and(
      WOQL.triple("v:Value_ID", "notes", "v:NoteObj"),
      WOQL.triple("v:NoteObj", "comment", "v:Notes"),
    ),
	  WOQL.opt().triple("v:Value_ID", "start", "v:From"),
	  WOQL.opt().triple("v:Value_ID", "end", "v:To"),
	  WOQL.opt().and(
      	WOQL.triple("v:Value_ID", "confidence", "v:RawConfidence"),
        WOQL.re("#(.*)", "v:RawConfidence", ["v:FullConfidence", "v:Confidence"])
    ),
	  WOQL.and(
  		WOQL.or(
  			WOQL.triple("v:Value_ID", "scm:string", "v:Value"),
        WOQL.triple("v:Value_ID", "scm:integerRange", "v:Value"),
  			WOQL.triple("v:Value_ID", "scm:decimalRange", "v:Value"),
  			WOQL.and(
          		WOQL.triple("v:Value_ID", "scm:epistemicState", "v:RawValue"),
          		WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        ),
			  WOQL.and(
  			    WOQL.triple("v:Value_ID", "scm:degreeOfCentralization", "v:RawValue"),
            	WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        ),
			  WOQL.and(
  			    WOQL.triple("v:Value_ID", "scm:incomeSource", "v:RawValue"), 
            	WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        	),
			WOQL.and(  			 
			    WOQL.triple("v:Value_ID", "scm:supraPolityRelations", "v:RawValue"),
          		WOQL.re("#(.*)", "v:RawValue", ["v:FullValue", "v:Value"])
        	)
		  )
	  )
)).file("/app/local_files/full_dump.csv")


WOQL.and(
   WOQL.triple("v:Polity", "type", "scm:Polity"),
   WOQL.triple("v:Polity", "successor", "v:Successor"),
   WOQL.triple("v:Polity", "predecessor", "v:Predecessor"),
   WOQL.triple("v:Polity", "label", "v:Lab"),
   WOQL.triple("v:Successor", "label", "v:Slab"),
   WOQL.triple("v:Predecessor", "label", "v:Plab"),
   WOQL.opt().and(
	   WOQL.triple("v:Polity", "bureaucrats", "v:Variable"),
   	   WOQL.triple("v:Variable", "epistemicState", "v:Presence")
   )
)

view = View.graph();
view.width(1000);
view.height(800)
view.edges(["v:Predecessor", "v:Polity"], ["v:Polity", "v:Successor"])
view.node("v:Predecessor").text("v:Plab").icon({label: true})
view.node("v:Successor").text("v:Slab").icon({label: true})
view.node("v:Polity").text("v:Lab").icon({label: true})
view.node("v:Polity", "v:Presence").in("scm:absent").color([255,0,0])
view.node("v:Polity", "v:Presence").in("scm:present").color([0,255,0])
view.node("v:Polity", "v:Presence").in("scm:unknown").color([150,150,150])